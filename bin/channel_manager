#!/usr/bin/perl -w

use strict;
use Getopt::Long;
use File::Slurp;
use File::Fetch;
use File::Copy;

use lib './lib';
use MythConverg::Schema;

my $dbhost="127.0.0.1";
my $database="mythconverg";
my $user="mythtv";
my $pass="mythtv";
my $scan="channels.conf";
my $conf="contrib/freesat.csv";
my $videosource = "xmltv";
my $deleteinvisible = 0;
my $downloadicons = 0;
my $url = "http://www.lyngsat-logo.com/logo/tv/";
my $noconfigupdate = 0;

GetOptions('dbhost=s'=>\$dbhost,
           'database=s'=>\$database,
           'user=s'=>\$user,
           'pass=s'=>\$pass,
	   'scan=s'=>\$scan,
	   'conf=s'=>\$conf,
	   'videosource=s'=>\$videosource,
	   'delete-old' => \$deleteinvisible,
	   'download-icons' => \$downloadicons,
	   'no-config-update' => \$noconfigupdate
           ) || die "Usage:";

# read config file
my @conf_chans_file = read_file $conf;
die "Config file '$conf' is empty!\n"
    if 0 == scalar @conf_chans_file;

# Save config header line for later
my @conf_chans_out;
my $config_header = shift @conf_chans_file;
push @conf_chans_out, $config_header;

# read scanned channels
my @scanned_chans_file = read_file $scan;
die "Config file '$scan' is empty!\n"
    if 0 == scalar @scanned_chans_file;

# put scanned channels into hashref
my %scanned_chans;
foreach my $line (@scanned_chans_file)
{
    chomp($line);
    my $scan = parse_vdr_line($line);

    # put into hashref
    $scanned_chans{$scan->{sid}} = $scan;
}

# connect to db
my $s = MythConverg::Schema->connect(
    'dbi:mysql:database=mythconverg',
    $user, $pass,
    { mysql_enable_utf8 => 1, quote_char => q{`}, name_sep => q{.} },  
);

# get some tables
my $sources = $s->resultset('Videosource');
my $channels = $s->resultset('Channel');
my $multiplexes = $s->resultset('DtvMultiplex');

# Check video source and get sourceid.
my $source = $sources->find({name => $videosource})
    or die "Unknown video source '$videosource' (use -s <sourcename>).\n";
my $sourceid = $source->sourceid;

# Copy header file to output file
copy("contrib/" . $videosource . "_header.conf", "output/$videosource.xmltv")
    or die "Copy of header file failed: $!";

# Open output file and config file for writing
open XMLTV, ">>output/$videosource.xmltv" or die "Failed to open output file\n";


# First we should set all channels to be not visible
$channels->update({visible => 0});

# for each entry in config file find corresponding tuning data then check the database entry
foreach my $line (@conf_chans_file) {

    # Get details for current channel
    chomp($line);
    my ($channum, $callsign, $xmltvid, $sid, $icon)  = split(',',$line);

    # Find corresponding channel in scan data
    my $scanned_chan = $scanned_chans{$sid};

    # If channel can't be found, try searching on callsign and then die
    if (!defined($scanned_chan) || ($callsign ne $scanned_chan->{cs})) {
	my @name_matches = grep { $scanned_chans{$_}->{cs} eq $callsign } keys %scanned_chans;

	if (scalar @name_matches eq 1) {
	    print "Config channel $callsign ($sid): ServiceID changed to $name_matches[0].\n";
	    $sid = $name_matches[0];
	    $scanned_chan = $scanned_chans{$sid};
	} elsif (scalar @name_matches < 1) {
	    print "Config channel $callsign ($sid): no match in scan on ServiceID or name.\n";
	    next;
	} else {
	    print "Config channel $callsign ($sid): ServiceID changed.\n  Multiple name matches in scan: " .
		join(',', @name_matches) . 
		".\n  Please fix config.\n";
	    next;
	}
    }

    # Now we have the config channel and the corresponding channel in the scan.  See if we can find it in the database too.
    my $db_chan = undef;

    # Search db by service id.
    my @db_chans = $channels->search({serviceid => $sid});

    # Bail out if there are multiple channels with the same service id
    if (scalar @db_chans > 1) {
	print "Config channel $callsign ($sid): Multiple channels in database with serviceid $sid! Ignoring channel...\n";
	next;
    }

    if (scalar @db_chans eq 1) {

	# Found one possible match.  Check callsign.
	$db_chan = $db_chans[0];
	my $db_callsign = $db_chan->callsign;
	$db_callsign =~ s/:/ /g;

	# If the callsign of the db channel doesn't match then channel has likely been
	# renamed, since both the config and the scan agree on the new name
	if ($db_callsign ne $callsign) {
	    $db_chan->update({callsign => $callsign, name => $callsign});
	}

    } else {

	# Didn't find any matches on Service ID.  Search by callsign for outdated record.
	print "Config channel $callsign ($sid) missing from database.\n";

	# Config channel doesn't have a direct match on callsign and serviceid.  Search by callsign for outdated record
	# i.e. look for correct callsign but wrong service id.
	@db_chans = $channels->search({callsign => $callsign});
	print "    Found " . scalar @db_chans ." matches on callsign.\n";

	# If we have too many matches on callsign then die.
	if (scalar @db_chans > 1) {
	    print "    Too many matches on callsign to continue.\n";
	    next;
	}
	
	# If we have exactly one match we'll try to fix it up.
	if (scalar @db_chans eq 1) {
	    $db_chan = $db_chans[0];
	} else {
	    $db_chan = undef;
	}
    }

    # If db_chan is defined then we have a match in the database.  SID may or may not be correct. 
    # Otherwise we don't so we should create a channel entry.
    if (defined($db_chan)) {

	# First check the SID against the config (which has been checked for consistency with the scan already).
	if ($db_chan->serviceid ne $sid) {
	    # Update service id
	    print "Updating serviceid for $callsign to $sid from " . $db_chan->serviceid . "\n";
	    $db_chan->update({serviceid => $sid});
	}

	#Get database multiplex and tuning data from scan.
	my $db_mplex = $multiplexes->find({mplexid => $db_chan->mplexid});
	my $params = $scanned_chan->{__parameters__};

	# Check tuning data against scan.
	if ((abs($db_mplex->frequency / 1000 - $scanned_chan->{freq}) < 5) &&
	    ($db_mplex->polarity eq $params->{polarity}) &&
	    ($db_mplex->modulation eq $params->{modulation}) &&
	    ($db_mplex->fec eq $params->{fec}) &&
	    ($db_mplex->transportid eq $scanned_chan->{tid})) {

	    # Everything OK.

	} else {

	    # Tuning data are different.  Update/create multiplex and change mplexid in channel table.
	    my $mplex = find_multiplex($multiplexes, $scanned_chan);

	    print "Tuning details differ for $callsign (SID: $sid).  Updating multiplex from " .
		$db_chan->mplexid . " to " . $mplex->mplexid . ".\n";

    	    $db_chan->update({mplexid => $mplex->mplexid});
	}


    } else {

	# We don't have an existing channel entry so create a new one.
	# Get the multiplex for the new channel
	my $mplex = find_multiplex($multiplexes, $scanned_chan);

	print "Creating channel entry for $callsign (SID: $sid) using multiplex " . $mplex->mplexid . "\n";

	# Create a channel entry
	$db_chan = $channels->find_or_create(
	    {
		chanid => (([sort {$b <=> $a} $channels->get_column('chanid')->all]->[0] || 0) + 1),
		channum => $channum,
		sourceid => $sourceid,
		callsign => $callsign,
		name => $callsign,
		mplexid => $mplex->mplexid,
		serviceid => $sid
	    });
    }

    # Now we definitely have a channel entry in the db and the tuning data is correct.  Update other metadata.

    # If xmltvid give, set it and create xmltv config file.  Otherwise set useonairguide.
    my $useonairguide = 1;
    if ($xmltvid ne '') {
	$useonairguide = 0;
	print XMLTV "channel=$xmltvid\n";
    }

    # Update database
    $db_chan->update({
	visible => 1,
	channum => $channum,
	xmltvid => $xmltvid,
	useonairguide => $useonairguide
		     });

    # Set icon if specified (we don't want to overwrite existing if it's not)
    if ($icon ne '') {
	$db_chan->update({icon => $icon});
    }

    # If icon download asked for, fetch all the icons from lyngsat
    if ($downloadicons eq 1) {

	my $icon_dl = $url . substr($icon, 0, 1) x 2 . "/" . $icon;
	my $ff = File::Fetch->new(uri => $icon_dl);
	my $where = $ff->fetch( to => './output/icons' );

	print "Downloaded $icon_dl\n";

    }

    # Save updated details for output (i.e. the sid)
    my $output_line = join(',',$channum, $callsign, $xmltvid, $sid, $icon . "\n");
    push @conf_chans_out, $output_line;
}

close XMLTV;

# Now overwrite config file with any changes
write_file($conf, @conf_chans_out) unless $noconfigupdate;


# Check deleteinvisible option and then delete any invisible channels (i.e. ones in database but not config).
if ($deleteinvisible eq 1) {
    print "Deleting database channels not in config.\n";
    $channels->search({visible => 0})->delete;
}

sub parse_vdr_line {
    my $line = shift;

    # http://linuxtv.org/vdrwiki/index.php/Syntax_of_channels.conf
    # callsign;bouquet:frequency:params():source:symbolrate:vpid:apid:textpid:conditional:serviceid:networkid:transportid:radioid
    # Channel 4;BSkyB:10714:hC56:S28.2E:22000:2327:2328:2329:0:9212:2:2041:0
    # Channel 4;Channel 4 TV:650166:I999B8C23D12M64T2G32Y0:T:27500:560:561=eng,562=eng:0:0:8384:9018:8207:0

    my ($cs,$freq,$params,$src,$sr,undef,undef,undef,undef,$sid,$nid,$tid,undef)
        = ($line =~ m/([^:]+):?/g);

    # general fixups
    $cs =~ s/;.+//;
    $src =~ s/^(.).*/$1/;

    # satellite params
    (my $pol = $params) =~ s{.*([hv]).*}{$1}i;
    $pol = (length $pol > 1 ? undef : lc $pol);
    (my $fec = $params) =~ s{.*C(\d)(\d).*}{$1/$2}; # breaks for 0, so...
    $fec ||= 'auto';
    (my $mod_tmp = $params) =~ s{.*M(\d+).*}{$1};
    my $mod_sat = ($mod_tmp eq 2 ? "qpsk" : "8psk");
    (my $rolloff = $params) =~ s{.*O(\d+).*}{$1};
    $rolloff /= 100;

    # terrestrial params
    (my $inv = $params)  =~ s{.*I(\d+).*}{$1};
    $inv = ($inv eq 1 ? $inv : 'auto');
    (my $hp = $params)   =~ s{.*C(\d)(\d).*}{$1/$2}; # breaks for 0, so...
    $hp ||= 'auto';
    (my $lp = $params)   =~ s{.*D(\d)(\d).*}{$1/$2}; # breaks for 0, so...
    $lp ||= 'auto';
    (my $mod = $params)  =~ s{.*M(\d+).*}{qam_$1};
    $mod ||= 'auto';
    (my $bw = $params)   =~ s{.*B(\d).*}{$1};
    (my $tmde = $params) =~ s{.*T(\d).*}{$1};
    (my $grd = $params)  =~ s{.*G(\d+).*}{1/$1};
    (my $hrch = $params) =~ s{.*Y(\d).*}{$1};
    $hrch ||= 'n';

    return {
        cs => $cs,
        freq => $freq,

        '__parameters__' => ($src eq 'S' ? {
            fec => $fec,
            polarity => $pol,
            mod_sys => 'DVB-S',
	    modulation => $mod_sat,
	    constellation => $mod_sat,
	    rolloff => $rolloff,
	    hierarchy => 'a',
        } : {
            inversion => $inv,
            hp_code_rate => $hp,
            lp_code_rate => $lp,
            modulation => $mod,
            constellation => $mod, # guess?!
            bandwidth => $bw,
            transmission_mode => $tmde,
            guard_interval => $grd,
            hierarchy => $hrch,
        }),

        src => $src,
        sr => $sr,
        sid => $sid,
        nid => $nid,
        tid => $tid,
    };
}

sub find_multiplex {

    my $multiplexes = shift(@_);
    my $scanned_chan = shift(@_);

    my $use_freq = $scanned_chan->{freq} < 1_000_000 ? $scanned_chan->{freq} * 1_000 : $scanned_chan->{freq};
    my $use_sr = $scanned_chan->{sr} < 1_000_000 ? $scanned_chan->{sr} * 1_000 : $scanned_chan->{sr};
    my $mplex = $multiplexes->find(
	{
	    sourceid => $sourceid,
	    frequency => {
		-between => [
		     $use_freq - 2500,
		     $use_freq + 2500,
		    ],
	    },
		    symbolrate => $use_sr,
		    transportid => $scanned_chan->{tid},
		    networkid => $scanned_chan->{nid},
		    %{ $scanned_chan->{'__parameters__'} }
	});

    # return result if we got one
    return $mplex if defined $mplex;

    # Otherwise create an entry and return it
    $mplex = $multiplexes->create(
	{
	    sourceid => $sourceid,
	    frequency => $use_freq,
	    symbolrate => $use_sr,
	    transportid => $scanned_chan->{tid},
	    networkid => $scanned_chan->{nid},
	    %{ $scanned_chan->{'__parameters__'} }
	});

    return $mplex;
}
